{
  "address": "0x38628490c3043E5D0bbB26d5a0a62fC77342e9d5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADDRESS_IS_NOT_REGISTERED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AMOUNT_MUST_BE_GREATER_THAN_ZERO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MORE_THAN_MAX_POSSIBLE_COINS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_SUFFICIENT_COINS_TO_BURN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_SUFFICIENT_COINS_TO_REDEEM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_SUFFICIENT_COINS_TO_SEND",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REFFERED_USER_ITSELF",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "USER_IS_NOT_REGISTERED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS_NOT_ALLOWED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Brand_Reward_Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "brand",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "coins",
          "type": "uint256"
        }
      ],
      "name": "Purchase_Coins_Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "personRefferedBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "personReffered",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "coins",
          "type": "uint256"
        }
      ],
      "name": "Refferal_Coins_Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Review_Award_Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "brand",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Token_Rewarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Tokens_Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Tokens_Expired",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToBrand",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCoinsPool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "availableCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refferalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reviewCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reedemedCoins",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_brandCoins",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_brands",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_brandAmount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_platformCoins",
          "type": "uint256"
        }
      ],
      "name": "expireTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brand",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBrandRewardData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Governance.UserRewardData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "brand",
          "type": "address"
        }
      ],
      "name": "getUserBrandCoins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCoinsPossible",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_brandAddress",
          "type": "address"
        }
      ],
      "name": "purchaseItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brandAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_coinsAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemBrandReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_coinsAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refferalCoinsRewarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reffererAddress",
          "type": "address"
        }
      ],
      "name": "refferalUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userToPay",
          "type": "address"
        }
      ],
      "name": "reviewItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardingUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rewardUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updatedReward",
          "type": "uint256"
        }
      ],
      "name": "updateMaxCoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updatedRate",
          "type": "uint256"
        }
      ],
      "name": "updatePurchaseReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updatedReward",
          "type": "uint256"
        }
      ],
      "name": "updateRefferalReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e795f0ce9ded64b27e74536b7e186fa44709ebee57438b1206c8f5e00482e9e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x38628490c3043E5D0bbB26d5a0a62fC77342e9d5",
    "transactionIndex": 0,
    "gasUsed": "2474824",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000020000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000002010000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb4f0c828a1485c30fc7b3dd15c0faab799599d0b672de5092bbc0fa104eb9f81",
    "transactionHash": "0x7e795f0ce9ded64b27e74536b7e186fa44709ebee57438b1206c8f5e00482e9e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17947625,
        "transactionHash": "0x7e795f0ce9ded64b27e74536b7e186fa44709ebee57438b1206c8f5e00482e9e",
        "address": "0x38628490c3043E5D0bbB26d5a0a62fC77342e9d5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb4f0c828a1485c30fc7b3dd15c0faab799599d0b672de5092bbc0fa104eb9f81"
      }
    ],
    "blockNumber": 17947625,
    "cumulativeGasUsed": "2474824",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x77AD263Cd578045105FBFC88A477CAd808d39Cf6"
  ],
  "numDeployments": 1,
  "solcInputHash": "5578681f87638cc4de6ab4039230f419",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESS_IS_NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_MUST_BE_GREATER_THAN_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MORE_THAN_MAX_POSSIBLE_COINS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_SUFFICIENT_COINS_TO_BURN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_SUFFICIENT_COINS_TO_REDEEM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_SUFFICIENT_COINS_TO_SEND\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REFFERED_USER_ITSELF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USER_IS_NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS_NOT_ALLOWED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Brand_Reward_Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"brand\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"Purchase_Coins_Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"personRefferedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"personReffered\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"}],\"name\":\"Refferal_Coins_Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Review_Award_Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"brand\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Token_Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Tokens_Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Tokens_Expired\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBrand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCoinsPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refferalCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reviewCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reedemedCoins\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_brandCoins\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_brands\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_brandAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_platformCoins\",\"type\":\"uint256\"}],\"name\":\"expireTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brand\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBrandRewardData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.UserRewardData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"brand\",\"type\":\"address\"}],\"name\":\"getUserBrandCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCoinsPossible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_brandAddress\",\"type\":\"address\"}],\"name\":\"purchaseItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brandAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coinsAmount\",\"type\":\"uint256\"}],\"name\":\"redeemBrandReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinsAmount\",\"type\":\"uint256\"}],\"name\":\"redeemCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refferalCoinsRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reffererAddress\",\"type\":\"address\"}],\"name\":\"refferalUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userToPay\",\"type\":\"address\"}],\"name\":\"reviewItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardingUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedReward\",\"type\":\"uint256\"}],\"name\":\"updateMaxCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedRate\",\"type\":\"uint256\"}],\"name\":\"updatePurchaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatedReward\",\"type\":\"uint256\"}],\"name\":\"updateRefferalReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./Interfaces/IRewardToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Governance is Ownable {\\n    struct User {\\n        uint256 availableCoins;\\n        uint256 purchaseCoins;\\n        uint256 refferalCoins;\\n        uint256 reviewCoins;\\n        uint256 reedemedCoins;\\n        mapping(address brands => uint256 coins) rewardCoins;\\n    }\\n\\n    struct UserRewardData {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Brand {\\n        uint256 totalCoinsPool;\\n        mapping(address user => UserRewardData[]) userRewardData;\\n    }\\n\\n    address private immutable i_tokenAddress;\\n    uint256 public purchaseRewardRate = 100;\\n    uint256 public refferalCoinsRewarded = 200;\\n    // uint256 public reviewRewardRate = 50;\\n    uint256 public maxCoinsPossible = 1000;\\n\\n    mapping(address => User) public addressToUser;\\n    mapping(address => Brand) public addressToBrand;\\n    mapping(address => bool) private registeredAddress;\\n    mapping(address => string) private registeredUsers;\\n\\n    error MORE_THAN_MAX_POSSIBLE_COINS();\\n    error REFFERED_USER_ITSELF();\\n    error AMOUNT_MUST_BE_GREATER_THAN_ZERO();\\n    error NOT_SUFFICIENT_COINS_TO_REDEEM();\\n    error ZERO_ADDRESS_NOT_ALLOWED();\\n    error NOT_SUFFICIENT_COINS_TO_SEND();\\n    error NOT_SUFFICIENT_COINS_TO_BURN();\\n    error USER_IS_NOT_REGISTERED();\\n    error ADDRESS_IS_NOT_REGISTERED();\\n\\n    event Tokens_Burned(uint256 amount);\\n    event Brand_Reward_Burned(uint256 amount);\\n    event Tokens_Expired();\\n    event Token_Rewarded(\\n        address indexed brand,\\n        address indexed user,\\n        uint256 indexed amount\\n    );\\n\\n    event Purchase_Coins_Received(\\n        address indexed user,\\n        address indexed brand,\\n        uint256 indexed coins\\n    );\\n\\n    event Refferal_Coins_Received(\\n        address indexed personRefferedBy,\\n        address indexed personReffered,\\n        uint256 indexed coins\\n    );\\n\\n    event Review_Award_Transferred();\\n\\n    modifier sameUser(address _userAddress) {\\n        if (msg.sender == _userAddress) {\\n            revert REFFERED_USER_ITSELF();\\n        }\\n        _;\\n    }\\n\\n    modifier notZeroAddress(address _address) {\\n        if (_address == address(0)) {\\n            revert ZERO_ADDRESS_NOT_ALLOWED();\\n        }\\n        _;\\n    }\\n\\n    modifier greaterThanZero(uint256 _amount) {\\n        if (_amount == 0) {\\n            revert AMOUNT_MUST_BE_GREATER_THAN_ZERO();\\n        }\\n        _;\\n    }\\n\\n    modifier isUserRegistered() {\\n        if (bytes(registeredUsers[msg.sender]).length == 0) {\\n            revert USER_IS_NOT_REGISTERED();\\n        }\\n        _;\\n    }\\n\\n    modifier isBrandAddressRegistered() {\\n        if (registeredAddress[msg.sender] == false) {\\n            revert ADDRESS_IS_NOT_REGISTERED();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _tokenAddress) {\\n        i_tokenAddress = _tokenAddress;\\n    }\\n\\n    function registerUser(string memory _email) external {\\n        registeredUsers[msg.sender] = _email;\\n    }\\n\\n    function registerAddress() external {\\n        registeredAddress[msg.sender] = true;\\n    }\\n\\n    function purchaseItem(\\n        uint256 _purchaseAmount,\\n        address _brandAddress\\n    ) external isUserRegistered {\\n        uint256 coins = _purchaseAmount * purchaseRewardRate;\\n        if (coins > maxCoinsPossible) {\\n            coins = maxCoinsPossible;\\n        }\\n        //Mint for user as well as brands\\n        User storage _user = addressToUser[msg.sender];\\n        _user.purchaseCoins += coins;\\n        _user.availableCoins += coins;\\n        Brand storage brand = addressToBrand[_brandAddress];\\n        brand.totalCoinsPool += coins;\\n        IRewardToken(i_tokenAddress).mint(coins, msg.sender);\\n        IRewardToken(i_tokenAddress).mint(coins, _brandAddress);\\n        emit Purchase_Coins_Received(msg.sender, _brandAddress, coins);\\n    }\\n\\n    function refferalUser(\\n        address reffererAddress\\n    ) external sameUser(reffererAddress) isUserRegistered {\\n        //Update all the mappings\\n        User storage _user1 = addressToUser[reffererAddress];\\n        User storage _user2 = addressToUser[msg.sender];\\n        _user1.refferalCoins += refferalCoinsRewarded;\\n        _user1.availableCoins += refferalCoinsRewarded;\\n        _user2.refferalCoins += refferalCoinsRewarded;\\n        _user2.availableCoins += refferalCoinsRewarded;\\n        IRewardToken(i_tokenAddress).mint(\\n            refferalCoinsRewarded,\\n            reffererAddress\\n        );\\n        IRewardToken(i_tokenAddress).mint(refferalCoinsRewarded, msg.sender);\\n        // then mint for the user as well as refree\\n        emit Refferal_Coins_Received(\\n            reffererAddress,\\n            msg.sender,\\n            refferalCoinsRewarded\\n        );\\n    }\\n\\n    function reviewItem(\\n        uint256 _amount,\\n        address _userToPay\\n    ) external onlyOwner greaterThanZero(_amount) {\\n        // update the mappings and only owner can pay to the user , will only and update thew mappings\\n        User storage _user = addressToUser[_userToPay];\\n        _user.reviewCoins += _amount;\\n        _user.availableCoins += _amount;\\n        IRewardToken(i_tokenAddress).mint(_amount, _userToPay);\\n        emit Review_Award_Transferred();\\n    }\\n\\n    // redeem coins on purchase , review and refferal\\n\\n    /* Add a modfier for the brand check*/\\n\\n    function redeemCoins(\\n        uint256 _coinsAmount\\n    ) external greaterThanZero(_coinsAmount) isUserRegistered {\\n        // User mapping would be updated and then that much tokens would be burned from user balance\\n        User storage _user = addressToUser[msg.sender];\\n        uint256 _availableCoins = _user.availableCoins;\\n        if (_availableCoins < _coinsAmount) {\\n            revert NOT_SUFFICIENT_COINS_TO_REDEEM();\\n        }\\n        _user.availableCoins -= _coinsAmount;\\n        _user.reedemedCoins += _coinsAmount;\\n        IRewardToken(i_tokenAddress).burn(_coinsAmount, msg.sender);\\n        emit Tokens_Burned(_coinsAmount);\\n    }\\n\\n    function redeemBrandReward(\\n        address _brandAddress,\\n        uint256 _coinsAmount\\n    ) external greaterThanZero(_coinsAmount) isUserRegistered {\\n        //Check the available coins* that in the user mapping\\n        // Brand mapping would be updated and then that much tokens would be burned from user balance\\n        User storage _user = addressToUser[msg.sender];\\n        uint256 brandCoins = _user.rewardCoins[_brandAddress];\\n        if (brandCoins < _coinsAmount) {\\n            revert NOT_SUFFICIENT_COINS_TO_REDEEM();\\n        }\\n        _user.rewardCoins[_brandAddress] -= _coinsAmount;\\n        _user.reedemedCoins += _coinsAmount;\\n        IRewardToken(i_tokenAddress).burn(_coinsAmount, msg.sender);\\n        emit Brand_Reward_Burned(_coinsAmount);\\n    }\\n\\n    function rewardUser(\\n        address _rewardingUser,\\n        uint256 _amount\\n    ) external greaterThanZero(_amount) isBrandAddressRegistered {\\n        // The Brand will give tokens to their loyal users on their own\\n        // We will update the rewards mapping in the users table as well as the rewards mapping in the brands struct\\n        // We will also update the totalRewardedCoins in the brands struct\\n        Brand storage _brand = addressToBrand[msg.sender];\\n        User storage _user = addressToUser[_rewardingUser];\\n        if (_brand.totalCoinsPool < _amount) {\\n            revert NOT_SUFFICIENT_COINS_TO_SEND();\\n        }\\n        _brand.totalCoinsPool -= _amount;\\n        _brand.userRewardData[_rewardingUser].push(\\n            UserRewardData(block.timestamp, _amount)\\n        );\\n        _user.rewardCoins[msg.sender] += _amount;\\n\\n        /*Approve first in frontend using approve then call this */\\n        /*Approve function to be added so that user can call and not on */\\n        IRewardToken(i_tokenAddress).transferFrom(\\n            msg.sender,\\n            _rewardingUser,\\n            _amount\\n        );\\n        emit Token_Rewarded(msg.sender, _rewardingUser, _amount);\\n    }\\n\\n    function expireTokens(\\n        uint256 _brandCoins,\\n        address[] memory _brands,\\n        uint256[] memory _brandAmount,\\n        uint256 _platformCoins\\n    ) external {\\n        User storage _user = addressToUser[msg.sender];\\n        /*check for array lengths to be same */\\n        if (_brandCoins > 0) {\\n            for (uint i = 0; i < _brands.length; i++) {\\n                /*Addd validation checks for that no zero address is there */\\n                if (_user.rewardCoins[_brands[i]] < _brandAmount[i]) {\\n                    revert NOT_SUFFICIENT_COINS_TO_BURN();\\n                }\\n                _user.rewardCoins[_brands[i]] -= _brandAmount[i];\\n            }\\n        }\\n        if (_platformCoins > 0) {\\n            if (_user.availableCoins < _platformCoins) {\\n                revert NOT_SUFFICIENT_COINS_TO_BURN();\\n            }\\n            _user.availableCoins -= _platformCoins;\\n        }\\n        IRewardToken(i_tokenAddress).burn(\\n            _brandCoins + _platformCoins,\\n            msg.sender\\n        );\\n        emit Tokens_Expired();\\n    }\\n\\n    /*All getter functions \\n        struct User {\\n        uint256 availableCoins;\\n        uint256 purchaseCoins;\\n        uint256 refferalCoins;\\n        uint256 reviewCoins;\\n        uint256 reedemedCoins;\\n        mapping(address brands => uint256 coins) rewardCoins;\\n    }\\n\\n    struct UserRewardData {\\n        uint256 timestamp;\\n        uint256 amount;\\n    }\\n\\n    struct Brand {\\n        uint256 totalCoinsPool;\\n        uint256 usedForServices;\\n        mapping(address user => UserRewardData[]) userRewardData;\\n    }\\n\\n\\n    mapping(address user => User obj) public addressToUser;\\n    mapping(address brand => Brand obj) public addressToBrand;\\n    mapping(address => bool) private registeredAddress;\\n    mapping(address => bool) private registeredUsers;\\n    */\\n\\n    function updatePurchaseReward(uint256 _updatedRate) external onlyOwner {\\n        purchaseRewardRate = _updatedRate;\\n    }\\n\\n    function updateRefferalReward(uint256 _updatedReward) external onlyOwner {\\n        refferalCoinsRewarded = _updatedReward;\\n    }\\n\\n    function updateMaxCoins(uint256 _updatedReward) external onlyOwner {\\n        maxCoinsPossible = _updatedReward;\\n    }\\n\\n    function getUserBrandCoins(\\n        address user,\\n        address brand\\n    ) external view returns (uint256) {\\n        User storage _user = addressToUser[user];\\n        return _user.rewardCoins[brand];\\n    }\\n\\n    function getBrandRewardData(\\n        address brand,\\n        address user\\n    ) external view returns (UserRewardData[] memory) {\\n        Brand storage _brand = addressToBrand[brand];\\n        return _brand.userRewardData[user];\\n    }\\n\\n    function getTokenAddress() external view onlyOwner returns (address) {\\n        return i_tokenAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x83558e534a4c954ece15024b7ecd0150d15ab75f04d00d49553a2c3966f47cb0\",\"license\":\"MIT\"},\"contracts/Interfaces/IRewardToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardToken is IERC20 {\\n    function mint(uint256 _amount, address _user) external returns (bool);\\n\\n    function burn(uint256 amount, address _user) external;\\n\\n    function updateSupply(uint256 _newSupply) external;\\n}\\n\",\"keccak256\":\"0xa78b505ec9d191d849be104ba3a33cf99f6a08403265bd05388280f5970811f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052606460015560c86002556103e86003553480156200002157600080fd5b5060405162002c9738038062002c978339818101604052810190620000479190620001d8565b620000676200005b620000a260201b60201c565b620000aa60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200020a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a08262000173565b9050919050565b620001b28162000193565b8114620001be57600080fd5b50565b600081519050620001d281620001a7565b92915050565b600060208284031215620001f157620001f06200016e565b5b60006200020184828501620001c1565b91505092915050565b608051612a32620002656000396000818161041c015281816106b90152818161083f01528181610b1301528181610bb401528181610e9a01528181610f39015281816112300152818161154101526119ba0152612a326000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637ec94a7d116100c3578063c24311b91161007c578063c24311b914610338578063c966451514610356578063e1c091e014610374578063e4e103dc146103a4578063edf53886146103c0578063f2fde38b146103f45761014d565b80637ec94a7d1461028c5780638da5cb5b146102a857806399ccb2dc146102c6578063a2065e07146102e2578063b8fa5ff0146102fe578063b8fef7551461031a5761014d565b80634a559b4e116101155780634a559b4e146101e25780635fabd198146101fe578063655333d11461022e578063704f1b941461024a578063715018a6146102665780637bfe9efd146102705761014d565b806310fe9ae8146101525780631738b9d4146101705780631832425f146101a05780632fae804b146101aa57806339eb283c146101c6575b600080fd5b61015a610410565b6040516101679190611cff565b60405180910390f35b61018a60048036038101906101859190611d5a565b610440565b6040516101979190611db3565b60405180910390f35b6101a86104cf565b005b6101c460048036038101906101bf9190611dfa565b610529565b005b6101e060048036038101906101db9190611dfa565b61053b565b005b6101fc60048036038101906101f79190611e27565b610781565b005b61021860048036038101906102139190611e67565b61090e565b6040516102259190611db3565b60405180910390f35b61024860048036038101906102439190611e67565b61092c565b005b610264600480360381019061025f9190611fda565b610cb6565b005b61026e610d06565b005b61028a60048036038101906102859190611e27565b610d1a565b005b6102a660048036038101906102a19190612023565b611038565b005b6102b06112f9565b6040516102bd9190611cff565b60405180910390f35b6102e060048036038101906102db9190611dfa565b611322565b005b6102fc60048036038101906102f791906121ee565b611334565b005b61031860048036038101906103139190611dfa565b61160a565b005b61032261161c565b60405161032f9190611db3565b60405180910390f35b610340611622565b60405161034d9190611db3565b60405180910390f35b61035e611628565b60405161036b9190611db3565b60405180910390f35b61038e60048036038101906103899190611d5a565b61162e565b60405161039b919061237a565b60405180910390f35b6103be60048036038101906103b99190612023565b611727565b005b6103da60048036038101906103d59190611e67565b611abb565b6040516103eb95949392919061239c565b60405180910390f35b61040e60048036038101906104099190611e67565b611af1565b005b600061041a611b74565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b610531611b74565b8060028190555050565b8060008103610576576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546105c29061241e565b9050036105fb576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905083811015610681576040517f2171927c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83826000016000828254610695919061247e565b92505081905550838260040160008282546106b091906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcd3533c85336040518363ffffffff1660e01b81526004016107129291906124e6565b600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050507fad151d011c50a669300dfdfe7811ac07d94a4f4178f1b1e45a48300a207577ed846040516107739190611db3565b60405180910390a150505050565b610789611b74565b81600081036107c4576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600301600082825461081b91906124b2565b925050819055508381600001600082825461083691906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d85856040518363ffffffff1660e01b81526004016108989291906124e6565b6020604051808303816000875af11580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190612547565b507f0415d1c9ed315196a46f67e779ccccfbbf5effe72c150be90e6f36dac4716da760405160405180910390a150505050565b60056020528060005260406000206000915090508060000154905081565b808073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610992576040517fda4cf54a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546109de9061241e565b905003610a17576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600254826002016000828254610ab391906124b2565b92505081905550600254826000016000828254610ad091906124b2565b92505081905550600254816002016000828254610aed91906124b2565b92505081905550600254816000016000828254610b0a91906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d600254866040518363ffffffff1660e01b8152600401610b6e9291906124e6565b6020604051808303816000875af1158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190612547565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d600254336040518363ffffffff1660e01b8152600401610c0f9291906124e6565b6020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190612547565b506002543373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fd335841347608560912db3082bf255d6cb5798deb44d8345d3c72f4ccf1a66c060405160405180910390a450505050565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610d02919061272b565b5050565b610d0e611b74565b610d186000611bf2565b565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610d669061241e565b905003610d9f576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060015483610daf91906127fd565b9050600354811115610dc15760035490505b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816001016000828254610e1891906124b2565b9250508190555081816000016000828254610e3391906124b2565b925050819055506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000016000828254610e9191906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d84336040518363ffffffff1660e01b8152600401610ef39291906124e6565b6020604051808303816000875af1158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190612547565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d84866040518363ffffffff1660e01b8152600401610f929291906124e6565b6020604051808303816000875af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612547565b50828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e9edcce3be999ff0d1f0e790125b179f891f23dedbb2bd47dac7bcb06bd7a4260405160405180910390a45050505050565b8060008103611073576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546110bf9061241e565b9050036110f8576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156111bb576040517f2171927c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838260050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461120c919061247e565b925050819055508382600401600082825461122791906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcd3533c85336040518363ffffffff1660e01b81526004016112899291906124e6565b600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050507f3eb5a4356c0e029e7b4577e4499e5106c3bf2b3e339837c04e2545fc6e932a76846040516112ea9190611db3565b60405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61132a611b74565b8060018190555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008511156114dc5760005b84518110156114da5783818151811061139f5761139e61283f565b5b60200260200101518260050160008784815181106113c0576113bf61283f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561143b576040517f4b641a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83818151811061144e5761144d61283f565b5b602002602001015182600501600087848151811061146f5761146e61283f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c0919061247e565b9250508190555080806114d29061286e565b915050611383565b505b600082111561153f578181600001541015611523576040517f4b641a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816000016000828254611537919061247e565b925050819055505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcd3533c838761158791906124b2565b336040518363ffffffff1660e01b81526004016115a59291906124e6565b600060405180830381600087803b1580156115bf57600080fd5b505af11580156115d3573d6000803e3d6000fd5b505050507f80c512f84682cab167572827e89b0c3f7b8a6b7c3d24b04e5357fe838d25125d60405160405180910390a15050505050565b611612611b74565b8060038190555050565b60015481565b60025481565b60035481565b60606000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561171a578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906116d4565b5050505091505092915050565b8060008103611762576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036117ec576040517f12aa042000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905083826000015410156118b0576040517f650fa5d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838260000160008282546118c4919061247e565b925050819055508160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040528042815260200186815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050838160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119b191906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3387876040518463ffffffff1660e01b8152600401611a15939291906128b6565b6020604051808303816000875af1158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a589190612547565b50838573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f45227e760ca1e93f0f8feaac9f5d644c5dcd5559a3ec7bb76496576dac24e52a60405160405180910390a45050505050565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b611af9611b74565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f90612970565b60405180910390fd5b611b7181611bf2565b50565b611b7c611cb6565b73ffffffffffffffffffffffffffffffffffffffff16611b9a6112f9565b73ffffffffffffffffffffffffffffffffffffffff1614611bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be7906129dc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ce982611cbe565b9050919050565b611cf981611cde565b82525050565b6000602082019050611d146000830184611cf0565b92915050565b6000604051905090565b600080fd5b600080fd5b611d3781611cde565b8114611d4257600080fd5b50565b600081359050611d5481611d2e565b92915050565b60008060408385031215611d7157611d70611d24565b5b6000611d7f85828601611d45565b9250506020611d9085828601611d45565b9150509250929050565b6000819050919050565b611dad81611d9a565b82525050565b6000602082019050611dc86000830184611da4565b92915050565b611dd781611d9a565b8114611de257600080fd5b50565b600081359050611df481611dce565b92915050565b600060208284031215611e1057611e0f611d24565b5b6000611e1e84828501611de5565b91505092915050565b60008060408385031215611e3e57611e3d611d24565b5b6000611e4c85828601611de5565b9250506020611e5d85828601611d45565b9150509250929050565b600060208284031215611e7d57611e7c611d24565b5b6000611e8b84828501611d45565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ee782611e9e565b810181811067ffffffffffffffff82111715611f0657611f05611eaf565b5b80604052505050565b6000611f19611d1a565b9050611f258282611ede565b919050565b600067ffffffffffffffff821115611f4557611f44611eaf565b5b611f4e82611e9e565b9050602081019050919050565b82818337600083830152505050565b6000611f7d611f7884611f2a565b611f0f565b905082815260208101848484011115611f9957611f98611e99565b5b611fa4848285611f5b565b509392505050565b600082601f830112611fc157611fc0611e94565b5b8135611fd1848260208601611f6a565b91505092915050565b600060208284031215611ff057611fef611d24565b5b600082013567ffffffffffffffff81111561200e5761200d611d29565b5b61201a84828501611fac565b91505092915050565b6000806040838503121561203a57612039611d24565b5b600061204885828601611d45565b925050602061205985828601611de5565b9150509250929050565b600067ffffffffffffffff82111561207e5761207d611eaf565b5b602082029050602081019050919050565b600080fd5b60006120a76120a284612063565b611f0f565b905080838252602082019050602084028301858111156120ca576120c961208f565b5b835b818110156120f357806120df8882611d45565b8452602084019350506020810190506120cc565b5050509392505050565b600082601f83011261211257612111611e94565b5b8135612122848260208601612094565b91505092915050565b600067ffffffffffffffff82111561214657612145611eaf565b5b602082029050602081019050919050565b600061216a6121658461212b565b611f0f565b9050808382526020820190506020840283018581111561218d5761218c61208f565b5b835b818110156121b657806121a28882611de5565b84526020840193505060208101905061218f565b5050509392505050565b600082601f8301126121d5576121d4611e94565b5b81356121e5848260208601612157565b91505092915050565b6000806000806080858703121561220857612207611d24565b5b600061221687828801611de5565b945050602085013567ffffffffffffffff81111561223757612236611d29565b5b612243878288016120fd565b935050604085013567ffffffffffffffff81111561226457612263611d29565b5b612270878288016121c0565b925050606061228187828801611de5565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122c281611d9a565b82525050565b6040820160008201516122de60008501826122b9565b5060208201516122f160208501826122b9565b50505050565b600061230383836122c8565b60408301905092915050565b6000602082019050919050565b60006123278261228d565b6123318185612298565b935061233c836122a9565b8060005b8381101561236d57815161235488826122f7565b975061235f8361230f565b925050600181019050612340565b5085935050505092915050565b60006020820190508181036000830152612394818461231c565b905092915050565b600060a0820190506123b16000830188611da4565b6123be6020830187611da4565b6123cb6040830186611da4565b6123d86060830185611da4565b6123e56080830184611da4565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061243657607f821691505b602082108103612449576124486123ef565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061248982611d9a565b915061249483611d9a565b92508282039050818111156124ac576124ab61244f565b5b92915050565b60006124bd82611d9a565b91506124c883611d9a565b92508282019050808211156124e0576124df61244f565b5b92915050565b60006040820190506124fb6000830185611da4565b6125086020830184611cf0565b9392505050565b60008115159050919050565b6125248161250f565b811461252f57600080fd5b50565b6000815190506125418161251b565b92915050565b60006020828403121561255d5761255c611d24565b5b600061256b84828501612532565b91505092915050565b600081519050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026125e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826125a4565b6125eb86836125a4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061262861262361261e84611d9a565b612603565b611d9a565b9050919050565b6000819050919050565b6126428361260d565b61265661264e8261262f565b8484546125b1565b825550505050565b600090565b61266b61265e565b612676818484612639565b505050565b5b8181101561269a5761268f600082612663565b60018101905061267c565b5050565b601f8211156126df576126b08161257f565b6126b984612594565b810160208510156126c8578190505b6126dc6126d485612594565b83018261267b565b50505b505050565b600082821c905092915050565b6000612702600019846008026126e4565b1980831691505092915050565b600061271b83836126f1565b9150826002028217905092915050565b61273482612574565b67ffffffffffffffff81111561274d5761274c611eaf565b5b612757825461241e565b61276282828561269e565b600060209050601f8311600181146127955760008415612783578287015190505b61278d858261270f565b8655506127f5565b601f1984166127a38661257f565b60005b828110156127cb578489015182556001820191506020850194506020810190506127a6565b868310156127e857848901516127e4601f8916826126f1565b8355505b6001600288020188555050505b505050505050565b600061280882611d9a565b915061281383611d9a565b925082820261282181611d9a565b915082820484148315176128385761283761244f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061287982611d9a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ab576128aa61244f565b5b600182019050919050565b60006060820190506128cb6000830186611cf0565b6128d86020830185611cf0565b6128e56040830184611da4565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061295a6026836128ed565b9150612965826128fe565b604082019050919050565b600060208201905081810360008301526129898161294d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129c66020836128ed565b91506129d182612990565b602082019050919050565b600060208201905081810360008301526129f5816129b9565b905091905056fea26469706673582212202b620febd7e8fce9b5b3a409d06e4b1f9d9baffa3cb03fcbf9d576b4038557d764736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80637ec94a7d116100c3578063c24311b91161007c578063c24311b914610338578063c966451514610356578063e1c091e014610374578063e4e103dc146103a4578063edf53886146103c0578063f2fde38b146103f45761014d565b80637ec94a7d1461028c5780638da5cb5b146102a857806399ccb2dc146102c6578063a2065e07146102e2578063b8fa5ff0146102fe578063b8fef7551461031a5761014d565b80634a559b4e116101155780634a559b4e146101e25780635fabd198146101fe578063655333d11461022e578063704f1b941461024a578063715018a6146102665780637bfe9efd146102705761014d565b806310fe9ae8146101525780631738b9d4146101705780631832425f146101a05780632fae804b146101aa57806339eb283c146101c6575b600080fd5b61015a610410565b6040516101679190611cff565b60405180910390f35b61018a60048036038101906101859190611d5a565b610440565b6040516101979190611db3565b60405180910390f35b6101a86104cf565b005b6101c460048036038101906101bf9190611dfa565b610529565b005b6101e060048036038101906101db9190611dfa565b61053b565b005b6101fc60048036038101906101f79190611e27565b610781565b005b61021860048036038101906102139190611e67565b61090e565b6040516102259190611db3565b60405180910390f35b61024860048036038101906102439190611e67565b61092c565b005b610264600480360381019061025f9190611fda565b610cb6565b005b61026e610d06565b005b61028a60048036038101906102859190611e27565b610d1a565b005b6102a660048036038101906102a19190612023565b611038565b005b6102b06112f9565b6040516102bd9190611cff565b60405180910390f35b6102e060048036038101906102db9190611dfa565b611322565b005b6102fc60048036038101906102f791906121ee565b611334565b005b61031860048036038101906103139190611dfa565b61160a565b005b61032261161c565b60405161032f9190611db3565b60405180910390f35b610340611622565b60405161034d9190611db3565b60405180910390f35b61035e611628565b60405161036b9190611db3565b60405180910390f35b61038e60048036038101906103899190611d5a565b61162e565b60405161039b919061237a565b60405180910390f35b6103be60048036038101906103b99190612023565b611727565b005b6103da60048036038101906103d59190611e67565b611abb565b6040516103eb95949392919061239c565b60405180910390f35b61040e60048036038101906104099190611e67565b611af1565b005b600061041a611b74565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b610531611b74565b8060028190555050565b8060008103610576576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546105c29061241e565b9050036105fb576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905083811015610681576040517f2171927c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83826000016000828254610695919061247e565b92505081905550838260040160008282546106b091906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcd3533c85336040518363ffffffff1660e01b81526004016107129291906124e6565b600060405180830381600087803b15801561072c57600080fd5b505af1158015610740573d6000803e3d6000fd5b505050507fad151d011c50a669300dfdfe7811ac07d94a4f4178f1b1e45a48300a207577ed846040516107739190611db3565b60405180910390a150505050565b610789611b74565b81600081036107c4576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508381600301600082825461081b91906124b2565b925050819055508381600001600082825461083691906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d85856040518363ffffffff1660e01b81526004016108989291906124e6565b6020604051808303816000875af11580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190612547565b507f0415d1c9ed315196a46f67e779ccccfbbf5effe72c150be90e6f36dac4716da760405160405180910390a150505050565b60056020528060005260406000206000915090508060000154905081565b808073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610992576040517fda4cf54a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546109de9061241e565b905003610a17576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600254826002016000828254610ab391906124b2565b92505081905550600254826000016000828254610ad091906124b2565b92505081905550600254816002016000828254610aed91906124b2565b92505081905550600254816000016000828254610b0a91906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d600254866040518363ffffffff1660e01b8152600401610b6e9291906124e6565b6020604051808303816000875af1158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190612547565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d600254336040518363ffffffff1660e01b8152600401610c0f9291906124e6565b6020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190612547565b506002543373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fd335841347608560912db3082bf255d6cb5798deb44d8345d3c72f4ccf1a66c060405160405180910390a450505050565b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209081610d02919061272b565b5050565b610d0e611b74565b610d186000611bf2565b565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610d669061241e565b905003610d9f576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060015483610daf91906127fd565b9050600354811115610dc15760035490505b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816001016000828254610e1891906124b2565b9250508190555081816000016000828254610e3391906124b2565b925050819055506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000016000828254610e9191906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d84336040518363ffffffff1660e01b8152600401610ef39291906124e6565b6020604051808303816000875af1158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190612547565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166394bf804d84866040518363ffffffff1660e01b8152600401610f929291906124e6565b6020604051808303816000875af1158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612547565b50828473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e9edcce3be999ff0d1f0e790125b179f891f23dedbb2bd47dac7bcb06bd7a4260405160405180910390a45050505050565b8060008103611073576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546110bf9061241e565b9050036110f8576040517f40696cd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156111bb576040517f2171927c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838260050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461120c919061247e565b925050819055508382600401600082825461122791906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcd3533c85336040518363ffffffff1660e01b81526004016112899291906124e6565b600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050507f3eb5a4356c0e029e7b4577e4499e5106c3bf2b3e339837c04e2545fc6e932a76846040516112ea9190611db3565b60405180910390a15050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61132a611b74565b8060018190555050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008511156114dc5760005b84518110156114da5783818151811061139f5761139e61283f565b5b60200260200101518260050160008784815181106113c0576113bf61283f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561143b576040517f4b641a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83818151811061144e5761144d61283f565b5b602002602001015182600501600087848151811061146f5761146e61283f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c0919061247e565b9250508190555080806114d29061286e565b915050611383565b505b600082111561153f578181600001541015611523576040517f4b641a9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816000016000828254611537919061247e565b925050819055505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fcd3533c838761158791906124b2565b336040518363ffffffff1660e01b81526004016115a59291906124e6565b600060405180830381600087803b1580156115bf57600080fd5b505af11580156115d3573d6000803e3d6000fd5b505050507f80c512f84682cab167572827e89b0c3f7b8a6b7c3d24b04e5357fe838d25125d60405160405180910390a15050505050565b611612611b74565b8060038190555050565b60015481565b60025481565b60035481565b60606000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561171a578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906116d4565b5050505091505092915050565b8060008103611762576040517f46f415bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036117ec576040517f12aa042000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905083826000015410156118b0576040517f650fa5d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838260000160008282546118c4919061247e565b925050819055508160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040528042815260200186815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050838160050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119b191906124b2565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3387876040518463ffffffff1660e01b8152600401611a15939291906128b6565b6020604051808303816000875af1158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a589190612547565b50838573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f45227e760ca1e93f0f8feaac9f5d644c5dcd5559a3ec7bb76496576dac24e52a60405160405180910390a45050505050565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b611af9611b74565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f90612970565b60405180910390fd5b611b7181611bf2565b50565b611b7c611cb6565b73ffffffffffffffffffffffffffffffffffffffff16611b9a6112f9565b73ffffffffffffffffffffffffffffffffffffffff1614611bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be7906129dc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ce982611cbe565b9050919050565b611cf981611cde565b82525050565b6000602082019050611d146000830184611cf0565b92915050565b6000604051905090565b600080fd5b600080fd5b611d3781611cde565b8114611d4257600080fd5b50565b600081359050611d5481611d2e565b92915050565b60008060408385031215611d7157611d70611d24565b5b6000611d7f85828601611d45565b9250506020611d9085828601611d45565b9150509250929050565b6000819050919050565b611dad81611d9a565b82525050565b6000602082019050611dc86000830184611da4565b92915050565b611dd781611d9a565b8114611de257600080fd5b50565b600081359050611df481611dce565b92915050565b600060208284031215611e1057611e0f611d24565b5b6000611e1e84828501611de5565b91505092915050565b60008060408385031215611e3e57611e3d611d24565b5b6000611e4c85828601611de5565b9250506020611e5d85828601611d45565b9150509250929050565b600060208284031215611e7d57611e7c611d24565b5b6000611e8b84828501611d45565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ee782611e9e565b810181811067ffffffffffffffff82111715611f0657611f05611eaf565b5b80604052505050565b6000611f19611d1a565b9050611f258282611ede565b919050565b600067ffffffffffffffff821115611f4557611f44611eaf565b5b611f4e82611e9e565b9050602081019050919050565b82818337600083830152505050565b6000611f7d611f7884611f2a565b611f0f565b905082815260208101848484011115611f9957611f98611e99565b5b611fa4848285611f5b565b509392505050565b600082601f830112611fc157611fc0611e94565b5b8135611fd1848260208601611f6a565b91505092915050565b600060208284031215611ff057611fef611d24565b5b600082013567ffffffffffffffff81111561200e5761200d611d29565b5b61201a84828501611fac565b91505092915050565b6000806040838503121561203a57612039611d24565b5b600061204885828601611d45565b925050602061205985828601611de5565b9150509250929050565b600067ffffffffffffffff82111561207e5761207d611eaf565b5b602082029050602081019050919050565b600080fd5b60006120a76120a284612063565b611f0f565b905080838252602082019050602084028301858111156120ca576120c961208f565b5b835b818110156120f357806120df8882611d45565b8452602084019350506020810190506120cc565b5050509392505050565b600082601f83011261211257612111611e94565b5b8135612122848260208601612094565b91505092915050565b600067ffffffffffffffff82111561214657612145611eaf565b5b602082029050602081019050919050565b600061216a6121658461212b565b611f0f565b9050808382526020820190506020840283018581111561218d5761218c61208f565b5b835b818110156121b657806121a28882611de5565b84526020840193505060208101905061218f565b5050509392505050565b600082601f8301126121d5576121d4611e94565b5b81356121e5848260208601612157565b91505092915050565b6000806000806080858703121561220857612207611d24565b5b600061221687828801611de5565b945050602085013567ffffffffffffffff81111561223757612236611d29565b5b612243878288016120fd565b935050604085013567ffffffffffffffff81111561226457612263611d29565b5b612270878288016121c0565b925050606061228187828801611de5565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122c281611d9a565b82525050565b6040820160008201516122de60008501826122b9565b5060208201516122f160208501826122b9565b50505050565b600061230383836122c8565b60408301905092915050565b6000602082019050919050565b60006123278261228d565b6123318185612298565b935061233c836122a9565b8060005b8381101561236d57815161235488826122f7565b975061235f8361230f565b925050600181019050612340565b5085935050505092915050565b60006020820190508181036000830152612394818461231c565b905092915050565b600060a0820190506123b16000830188611da4565b6123be6020830187611da4565b6123cb6040830186611da4565b6123d86060830185611da4565b6123e56080830184611da4565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061243657607f821691505b602082108103612449576124486123ef565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061248982611d9a565b915061249483611d9a565b92508282039050818111156124ac576124ab61244f565b5b92915050565b60006124bd82611d9a565b91506124c883611d9a565b92508282019050808211156124e0576124df61244f565b5b92915050565b60006040820190506124fb6000830185611da4565b6125086020830184611cf0565b9392505050565b60008115159050919050565b6125248161250f565b811461252f57600080fd5b50565b6000815190506125418161251b565b92915050565b60006020828403121561255d5761255c611d24565b5b600061256b84828501612532565b91505092915050565b600081519050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026125e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826125a4565b6125eb86836125a4565b95508019841693508086168417925050509392505050565b6000819050919050565b600061262861262361261e84611d9a565b612603565b611d9a565b9050919050565b6000819050919050565b6126428361260d565b61265661264e8261262f565b8484546125b1565b825550505050565b600090565b61266b61265e565b612676818484612639565b505050565b5b8181101561269a5761268f600082612663565b60018101905061267c565b5050565b601f8211156126df576126b08161257f565b6126b984612594565b810160208510156126c8578190505b6126dc6126d485612594565b83018261267b565b50505b505050565b600082821c905092915050565b6000612702600019846008026126e4565b1980831691505092915050565b600061271b83836126f1565b9150826002028217905092915050565b61273482612574565b67ffffffffffffffff81111561274d5761274c611eaf565b5b612757825461241e565b61276282828561269e565b600060209050601f8311600181146127955760008415612783578287015190505b61278d858261270f565b8655506127f5565b601f1984166127a38661257f565b60005b828110156127cb578489015182556001820191506020850194506020810190506127a6565b868310156127e857848901516127e4601f8916826126f1565b8355505b6001600288020188555050505b505050505050565b600061280882611d9a565b915061281383611d9a565b925082820261282181611d9a565b915082820484148315176128385761283761244f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061287982611d9a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128ab576128aa61244f565b5b600182019050919050565b60006060820190506128cb6000830186611cf0565b6128d86020830185611cf0565b6128e56040830184611da4565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061295a6026836128ed565b9150612965826128fe565b604082019050919050565b600060208201905081810360008301526129898161294d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006129c66020836128ed565b91506129d182612990565b602082019050919050565b600060208201905081810360008301526129f5816129b9565b905091905056fea26469706673582212202b620febd7e8fce9b5b3a409d06e4b1f9d9baffa3cb03fcbf9d576b4038557d764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 908,
        "contract": "contracts/Governance.sol:Governance",
        "label": "purchaseRewardRate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 911,
        "contract": "contracts/Governance.sol:Governance",
        "label": "refferalCoinsRewarded",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 914,
        "contract": "contracts/Governance.sol:Governance",
        "label": "maxCoinsPossible",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 919,
        "contract": "contracts/Governance.sol:Governance",
        "label": "addressToUser",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(User)889_storage)"
      },
      {
        "astId": 924,
        "contract": "contracts/Governance.sol:Governance",
        "label": "addressToBrand",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Brand)903_storage)"
      },
      {
        "astId": 928,
        "contract": "contracts/Governance.sol:Governance",
        "label": "registeredAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 932,
        "contract": "contracts/Governance.sol:Governance",
        "label": "registeredUsers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UserRewardData)894_storage)dyn_storage": {
        "base": "t_struct(UserRewardData)894_storage",
        "encoding": "dynamic_array",
        "label": "struct Governance.UserRewardData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(UserRewardData)894_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Governance.UserRewardData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserRewardData)894_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(Brand)903_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Governance.Brand)",
        "numberOfBytes": "32",
        "value": "t_struct(Brand)903_storage"
      },
      "t_mapping(t_address,t_struct(User)889_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Governance.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)889_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Brand)903_storage": {
        "encoding": "inplace",
        "label": "struct Governance.Brand",
        "members": [
          {
            "astId": 896,
            "contract": "contracts/Governance.sol:Governance",
            "label": "totalCoinsPool",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 902,
            "contract": "contracts/Governance.sol:Governance",
            "label": "userRewardData",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_struct(UserRewardData)894_storage)dyn_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)889_storage": {
        "encoding": "inplace",
        "label": "struct Governance.User",
        "members": [
          {
            "astId": 876,
            "contract": "contracts/Governance.sol:Governance",
            "label": "availableCoins",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 878,
            "contract": "contracts/Governance.sol:Governance",
            "label": "purchaseCoins",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 880,
            "contract": "contracts/Governance.sol:Governance",
            "label": "refferalCoins",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 882,
            "contract": "contracts/Governance.sol:Governance",
            "label": "reviewCoins",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 884,
            "contract": "contracts/Governance.sol:Governance",
            "label": "reedemedCoins",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 888,
            "contract": "contracts/Governance.sol:Governance",
            "label": "rewardCoins",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserRewardData)894_storage": {
        "encoding": "inplace",
        "label": "struct Governance.UserRewardData",
        "members": [
          {
            "astId": 891,
            "contract": "contracts/Governance.sol:Governance",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 893,
            "contract": "contracts/Governance.sol:Governance",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}